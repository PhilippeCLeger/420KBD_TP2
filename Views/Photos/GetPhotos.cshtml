@model IEnumerable<UsersManager.Models.Photo>
<link rel="stylesheet" href="~/Content/original.bootstrap.css">
<link rel="stylesheet" href="~/Content/Site.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">

@{
    string sortDatesIconColor = ((string)Session["PhotoFieldToSort"] == "dates" ? "blue" : "black");
    string sortUsersIconColor = ((string)Session["PhotoFieldToSort"] == "users" ? "blue" : "black");
    string sortRatingsIconColor = ((string)Session["PhotoFieldToSort"] == "ratings" ? "blue" : "black");
    string searchTags = (string)Session["PhotoSearchTags"];
}
<div style="display: flex; flex-direction:row; column-gap: 2rem">
    <div>
        @Helper.GlyphiconAction("Create", "glyphicon glyphicon-plus", "Ajouter une photo")
        <span><input type="text" id="searchTags" style="width: 100px;" value="@searchTags"/></span>
        <span id="searchIcon" style="color:black"
              class="glyphiconStyle glyphicon glyphicon-search pointer" title="Trier par dates d'évaluation"></span>
    </div>

    <div id="commandSection" style="display:grid; grid-template-columns:30px 30px 30px;">
        <span id="sortDates" fieldToSort="dates" style="color:@sortDatesIconColor"
              class="sortRatings glyphicon glyphiconStyle glyphicon-calendar pointer" title="Trier par dates d'évaluation"></span>
        <span id="sortUsers" fieldToSort="users" style="color:@sortUsersIconColor"
              class="sortRatings glyphicon glyphiconStyle glyphicon-user pointer" title="Trier noms d'usager"></span>
        <span id="sortRatingss" fieldToSort="ratings" style="color:@sortRatingsIconColor"
              class="sortRatings glyphicon glyphiconStyle glyphicon-star pointer" title="Trier par évaluations"></span>
    </div>
</div>


<div class="row row-cols-6 margin-top-3">
    @{
        IEnumerable<UsersManager.Models.Photo> Photos = null;
        switch ((string)Session["PhotoFieldToSort"])
        {
            case "dates":
                if ((bool)Session["PhotoFieldSortDir"])
                {
                    Photos = Model.OrderBy(pr => pr.CreationDate);
                }
                else
                {
                    Photos = Model.OrderByDescending(pr => pr.CreationDate);
                }
                break;
            case "users":
                if ((bool)Session["PhotoFieldSortDir"])
                {
                    Photos = Model.OrderBy(pr => pr.User.FirstName).ThenBy(pr => pr.User.LastName);
                }
                else
                {
                    Photos = Model.OrderByDescending(pr => pr.User.FirstName).ThenByDescending(pr => pr.User.LastName);
                }
                break;
            case "ratings":
                if ((bool)Session["PhotoFieldSortDir"])
                {
                    Photos = Model.OrderBy(pr => pr.Ratings);
                }
                else
                {
                    Photos = Model.OrderByDescending(pr => pr.Ratings);
                }
                break;
            default:
                if (Photos == null)
                {
                    Photos = Model;
                }
                break;
        }
        foreach (UsersManager.Models.Photo photo in Photos)
        {
            <div class="col photo-border margin-top-3" onclick="location.href='@Url.Action("Details/" + photo.Id)'">
                <div class="card-title">@Helper.AvatarProfilLink(photo.User)</div>
                <h3 class="margin-top-3">@photo.Title</h3>
                <div class="">
                    <img src="@Url.Content(photo.GetUrl(false))" width="150" height="100" alt="@photo.Description" />
                </div>
                <div class="margin-top-3">
                    @Helper.ShowRating(photo.Ratings)
                </div>
            </div>
            
        }
    }
</div>


